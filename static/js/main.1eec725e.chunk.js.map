{"version":3,"sources":["components/card/Card.component.jsx","components/card-list/CardList.jsx","components/SearchBox/SearchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","person","id","alt","name","email","defaultProps","CardList","people","map","key","SearchBox","placeholder","changeHandler","type","onChange","App","searchHandler","evt","setState","keywords","target","value","state","this","userType","toLowerCase","filtered","filter","p","includes","fetch","then","response","json","data","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yVAGMA,G,kBAAO,SAACC,GACV,OACI,yBAAKC,UAAY,kBACb,yBAAKC,IAAG,8CAA2CF,EAAMG,OAAOC,IAAQC,IAAG,oBAAiBL,EAAMG,OAAOG,QACzG,4BAAMN,EAAMG,OAAOG,MACnB,2BAAKN,EAAMG,OAAOI,UAM9BR,EAAKS,aAAe,GAELT,QCZTU,EAAW,SAACT,GACd,OACI,yBAAKC,UAAY,aACXD,EAAMU,OAAOC,IAAI,SAACR,GAAD,OAAY,kBAAC,EAAD,CAAMS,IAAMT,EAAOC,GAAKD,OAASA,QAM5EM,EAASD,aAAe,GAETC,QCZFI,G,MAAY,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,cACrC,OACI,uBAAKd,UAAY,cACb,yBAAOe,KAAK,SAASF,YAAcA,EAAcG,SAAWF,OCuCzDG,E,YAvCX,aAAe,IAAD,8BACV,+CAQJC,cAAgB,SAAAC,GACZ,EAAKC,SAAS,CAAEC,SAAUF,EAAIG,OAAOC,SAPrC,EAAKC,MAAQ,CACTf,OAAQ,GACRY,SAAU,IALJ,E,sEAaJ,IAAD,EACwBI,KAAKD,MAA1Bf,EADH,EACGA,OACFiB,EAFD,EACWL,SACUM,cAEpBC,EAAWnB,EAAOoB,OAAO,SAACC,GAE5B,OADmBA,EAAEzB,KAAKsB,cACRI,SAASL,KAG/B,OACI,yBAAK1B,UAAU,OACX,wBAAIA,UAAW,SAAf,oBAEA,kBAAC,EAAD,CAAWa,YAAc,mBACdC,cAAgBW,KAAKP,gBAChC,kBAAC,EAAD,CAAUT,OAASmB,O,0CAIV,IAAD,OAChBI,MAAM,8CACDC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACG,GAAD,OAAU,EAAKhB,SAAS,CAAEX,OAAQ2B,U,GApClCC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,KAAK,SAAAiB,GACjCA,EAAaC,iB","file":"static/js/main.1eec725e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.component.styles.css'\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className={ 'card-container' }>\r\n            <img src={ `https://api.adorable.io/avatars/285/${ props.person.id }` } alt={ `Avatar of ${ props.person.name }` }/>\r\n            <h3>{ props.person.name }</h3>\r\n            <p>{ props.person.email }</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nCard.propTypes = {};\r\nCard.defaultProps = {};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './CardList.styles.css'\r\nimport Card from \"../card/Card.component\";\r\n\r\nconst CardList = (props) => {\r\n    return (\r\n        <div className={ 'card-list' }>\r\n            { props.people.map((person) => <Card key={ person.id } person={ person }/>) }\r\n        </div>\r\n    );\r\n};\r\n\r\nCardList.propTypes = {};\r\nCardList.defaultProps = {};\r\n\r\nexport default CardList;\r\n","import * as React from \"react\";\r\nimport './SearchBox.component.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, changeHandler }) => {\r\n    return (\r\n        <div className={ 'search-box' }>\r\n            <input type=\"search\" placeholder={ placeholder } onChange={ changeHandler }/>\r\n        </div>\r\n    );\r\n};\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport CardList from \"./components/card-list/CardList\";\r\nimport { SearchBox } from \"./components/SearchBox/SearchBox.component\";\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            people: [],\r\n            keywords: ''\r\n        };\r\n    }\r\n\r\n    searchHandler = evt => {\r\n        this.setState({ keywords: evt.target.value });\r\n    };\r\n\r\n    render() {\r\n        const { people, keywords } = this.state;\r\n        const userType = keywords.toLowerCase();\r\n\r\n        const filtered = people.filter((p) => {\r\n            const parsedName = p.name.toLowerCase();\r\n            return parsedName.includes(userType);\r\n        });\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <h1 className={'title'}>Monsters Rolodex</h1>\r\n\r\n                <SearchBox placeholder={ 'Search people...' }\r\n                           changeHandler={ this.searchHandler }/>\r\n                <CardList people={ filtered }></CardList>\r\n            </div>);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then((response) => response.json())\r\n            .then((data) => this.setState({ people: data }));\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}